name: Build and Release

on:
  push:
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Run Tests
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            whisper-rust/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('whisper-rust/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build Rust library
        run: ./scripts/build-rust.sh release

      - name: Run Swift tests
        run: swift test --build-path build

      - name: Run performance tests
        run: ./scripts/run-performance-tests.sh

  build:
    name: Build Application
    runs-on: macos-latest
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            whisper-rust/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('whisper-rust/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Import code signing certificates
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}

      - name: Build application
        env:
          WHISPERNODE_SIGNING_IDENTITY: ${{ secrets.SIGNING_IDENTITY }}
        run: ./scripts/build-release.sh Release

      - name: Notarize application
        env:
          WHISPERNODE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          WHISPERNODE_APPLE_ID: ${{ secrets.APPLE_ID }}
          WHISPERNODE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
        run: ./scripts/notarize-app.sh build/WhisperNode.app

      - name: Create DMG installer
        run: ./scripts/create-dmg.sh build/WhisperNode.app

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: WhisperNode-${{ github.ref_name }}
          path: |
            build/WhisperNode.app
            build/*.dmg
          retention-days: 30

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            build/*.dmg
          body: |
            ## WhisperNode ${{ github.ref_name }}

            ### üé§ Blazingly Fast Speech-to-Text for macOS

            On-device speech recognition with press-and-hold activation for developers and power users.

            **System Requirements:**
            - macOS 13.0+ (Ventura)
            - Apple Silicon (M1/M2/M3) processor

            **Installation:**
            1. Download the DMG file below
            2. Mount the DMG and drag WhisperNode to Applications
            3. Run WhisperNode and complete the first-time setup

            **What's New:**
            - See commit history for detailed changes

            **Note:** This release is automatically built and notarized by Apple.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: macos-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: |
          # Check for hardcoded secrets
          if grep -r "password\|secret\|key" --include="*.swift" --include="*.rs" Sources/ whisper-rust/src/ | grep -v "// " | grep -v "WHISPERNODE_"; then
            echo "‚ùå Potential hardcoded secrets found"
            exit 1
          fi

          # Check entitlements
          if [ -f "Sources/WhisperNode/Resources/WhisperNode.entitlements" ]; then
            echo "‚úÖ Entitlements file found"
            cat Sources/WhisperNode/Resources/WhisperNode.entitlements
          fi

          # Verify required security settings
          echo "‚úÖ Security scan completed"
